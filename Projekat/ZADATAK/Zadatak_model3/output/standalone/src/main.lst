1     	 0000					.public _headroom_gain
2     	 0000					.public _input_gain
3     	 0000					.public _processingState
4     	 0000					.public _sampleBuffer
5     	 0000					.extern _cl_wavread_bits_per_sample
6     	 0000					.extern _cl_wavread_close
7     	 0000					.extern _cl_wavread_frame_rate
8     	 0000					.extern _cl_wavread_getnchannels
9     	 0000					.extern _cl_wavread_number_of_frames
10    	 0000					.extern _cl_wavread_open
11    	 0000					.extern _cl_wavread_recvsample
12    	 0000					.extern _cl_wavwrite_close
13    	 0000					.extern _cl_wavwrite_open
14    	 0000					.extern _cl_wavwrite_sendsample
15    	 0000					.public _main
16    	 0000					.extern _printf
17    	 0000					.extern _processing
18    	 0000					.extern _processing_init
19    	 0000					.extern _strcpy
20    	 0000					.extern __div
21    							.xdata_ovly
21     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
22    	 0000				_headroom_gain
23    	 0000					.bss (0x1)
24    							.xdata_ovly
24     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
25    	 0000				_input_gain
26    	 0000					.bss (0x1)
27    							.xdata_ovly
27     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
28    	 0000				_processingState
29    	 0000					.bss (0x4)
30    							.ydata_ovly
30     >> start of macro: .ydata_ovly
1+    									seg_single , "Y_OVLY", Y
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_Y_ )
2+    						    segment
3+    						  .else
4+    						    segment "Y_OVLY"
5+    							.if "" != ""
6+    						___SegStart_Y_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .ydata_ovly
31    	 0000				_sampleBuffer
32    	 0000					.bss (0x80)
33    							.xdata_ovly
33     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
34    	 0000				_string_const_0
35    	 0000					.dw  (0x45)
	 0000	 00000045	 
36    	 0001					.dw  (0x72)
	 0001	 00000072	 
37    	 0002					.dw  (0x72)
	 0002	 00000072	 
38    	 0003					.dw  (0x6f)
	 0003	 0000006F	 
39    	 0004					.dw  (0x72)
	 0004	 00000072	 
40    	 0005					.dw  (0x32)
	 0005	 00000032	 
41    	 0006					.dw  (0x3a)
	 0006	 0000003A	 
42    	 0007					.dw  (0x20)
	 0007	 00000020	 
43    	 0008					.dw  (0x43)
	 0008	 00000043	 
44    	 0009					.dw  (0x6f)
	 0009	 0000006F	 
45    	 000A					.dw  (0x75)
	 000A	 00000075	 
46    	 000B					.dw  (0x6c)
	 000B	 0000006C	 
47    	 000C					.dw  (0x64)
	 000C	 00000064	 
48    	 000D					.dw  (0x20)
	 000D	 00000020	 
49    	 000E					.dw  (0x6e)
	 000E	 0000006E	 
50    	 000F					.dw  (0x6f)
	 000F	 0000006F	 
51    	 0010					.dw  (0x74)
	 0010	 00000074	 
52    	 0011					.dw  (0x20)
	 0011	 00000020	 
53    	 0012					.dw  (0x6f)
	 0012	 0000006F	 
54    	 0013					.dw  (0x70)
	 0013	 00000070	 
55    	 0014					.dw  (0x65)
	 0014	 00000065	 
56    	 0015					.dw  (0x6e)
	 0015	 0000006E	 
57    	 0016					.dw  (0x20)
	 0016	 00000020	 
58    	 0017					.dw  (0x69)
	 0017	 00000069	 
59    	 0018					.dw  (0x6e)
	 0018	 0000006E	 
60    	 0019					.dw  (0x70)
	 0019	 00000070	 
61    	 001A					.dw  (0x75)
	 001A	 00000075	 
62    	 001B					.dw  (0x74)
	 001B	 00000074	 
63    	 001C					.dw  (0x20)
	 001C	 00000020	 
64    	 001D					.dw  (0x77)
	 001D	 00000077	 
65    	 001E					.dw  (0x61)
	 001E	 00000061	 
66    	 001F					.dw  (0x76)
	 001F	 00000076	 
67    	 0020					.dw  (0x65)
	 0020	 00000065	 
68    	 0021					.dw  (0x66)
	 0021	 00000066	 
69    	 0022					.dw  (0x69)
	 0022	 00000069	 
70    	 0023					.dw  (0x6c)
	 0023	 0000006C	 
71    	 0024					.dw  (0x65)
	 0024	 00000065	 
72    	 0025					.dw  (0x20)
	 0025	 00000020	 
73    	 0026					.dw  (0x25)
	 0026	 00000025	 
74    	 0027					.dw  (0x73)
	 0027	 00000073	 
75    	 0028					.dw  (0x2e)
	 0028	 0000002E	 
76    	 0029					.dw  (0xa)
	 0029	 0000000A	 
77    	 002A					.dw  (0x0)
	 002A	 00000000	 
78    							.xdata_ovly
78     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
79    	 0000				_string_const_1
80    	 0000					.dw  (0x45)
	 0000	 00000045	 
81    	 0001					.dw  (0x72)
	 0001	 00000072	 
82    	 0002					.dw  (0x72)
	 0002	 00000072	 
83    	 0003					.dw  (0x6f)
	 0003	 0000006F	 
84    	 0004					.dw  (0x72)
	 0004	 00000072	 
85    	 0005					.dw  (0x3a)
	 0005	 0000003A	 
86    	 0006					.dw  (0x20)
	 0006	 00000020	 
87    	 0007					.dw  (0x43)
	 0007	 00000043	 
88    	 0008					.dw  (0x6f)
	 0008	 0000006F	 
89    	 0009					.dw  (0x75)
	 0009	 00000075	 
90    	 000A					.dw  (0x6c)
	 000A	 0000006C	 
91    	 000B					.dw  (0x64)
	 000B	 00000064	 
92    	 000C					.dw  (0x20)
	 000C	 00000020	 
93    	 000D					.dw  (0x6e)
	 000D	 0000006E	 
94    	 000E					.dw  (0x6f)
	 000E	 0000006F	 
95    	 000F					.dw  (0x74)
	 000F	 00000074	 
96    	 0010					.dw  (0x20)
	 0010	 00000020	 
97    	 0011					.dw  (0x6f)
	 0011	 0000006F	 
98    	 0012					.dw  (0x70)
	 0012	 00000070	 
99    	 0013					.dw  (0x65)
	 0013	 00000065	 
100   	 0014					.dw  (0x6e)
	 0014	 0000006E	 
101   	 0015					.dw  (0x20)
	 0015	 00000020	 
102   	 0016					.dw  (0x6f)
	 0016	 0000006F	 
103   	 0017					.dw  (0x75)
	 0017	 00000075	 
104   	 0018					.dw  (0x74)
	 0018	 00000074	 
105   	 0019					.dw  (0x70)
	 0019	 00000070	 
106   	 001A					.dw  (0x75)
	 001A	 00000075	 
107   	 001B					.dw  (0x74)
	 001B	 00000074	 
108   	 001C					.dw  (0x20)
	 001C	 00000020	 
109   	 001D					.dw  (0x77)
	 001D	 00000077	 
110   	 001E					.dw  (0x61)
	 001E	 00000061	 
111   	 001F					.dw  (0x76)
	 001F	 00000076	 
112   	 0020					.dw  (0x65)
	 0020	 00000065	 
113   	 0021					.dw  (0x66)
	 0021	 00000066	 
114   	 0022					.dw  (0x69)
	 0022	 00000069	 
115   	 0023					.dw  (0x6c)
	 0023	 0000006C	 
116   	 0024					.dw  (0x65)
	 0024	 00000065	 
117   	 0025					.dw  (0x2e)
	 0025	 0000002E	 
118   	 0026					.dw  (0xa)
	 0026	 0000000A	 
119   	 0027					.dw  (0x0)
	 0027	 00000000	 
120   							.xdata_ovly
120    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
121   	 0000				_string_const_2
122   	 0000					.dw  (0x31)
	 0000	 00000031	 
123   	 0001					.dw  (0x0)
	 0001	 00000000	 
124   							.xdata_ovly
124    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
125   	 0000				_string_const_3
126   	 0000					.dw  (0x61)
	 0000	 00000061	 
127   	 0001					.dw  (0x0)
	 0001	 00000000	 
128   							.xdata_ovly
128    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
129   	 0000				_string_const_4
130   	 0000					.dw  (0x61)
	 0000	 00000061	 
131   	 0001					.dw  (0x0)
	 0001	 00000000	 
132   							.xdata_ovly
132    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
133   	 0000				_string_const_5
134   	 0000					.dw  (0x61)
	 0000	 00000061	 
135   	 0001					.dw  (0x73)
	 0001	 00000073	 
136   	 0002					.dw  (0x0)
	 0002	 00000000	 
137   							.code_ovly
137    >> start of macro: .code_ovly
1+    									seg_single , "CODE_OVLY", CODE
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_CODE_ )
2+    						    segment
3+    						  .else
4+    						    segment "CODE_OVLY"
5+    							.if "" != ""
6+    						___SegStart_CODE_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .code_ovly
138   						
139   						
140   						
141   							# This construction should ensure linking of crt0 in case when target is a standalone program without the OS
142   							.if defined(_OVLY_)
143   								.if .strcmp('standalone',_OVLY_)=0
144   								.if .strcmp('crystal32',_TARGET_FAMILY_)=0
145   	 0000							.extern __start         # dummy use of __start to force linkage of crt0
146   	 0000				dummy		.equ(__start)
147   								.else
148   									.extern __intvec         # dummy use of __intvec to force linkage of intvec
149   						dummy		.equ(__intvec)
150   								.endif
151   								.endif
152   							.endif
153   						
154   	 0000				_main:			/* LN: 14 | CYCLE: 0 | RULES: () */ 
155   	 0000	 BB540007		xmem[i7] = i7			# LN: 14 | 
156   	 0001	 020F7FFF		i7 += 1			# LN: 14 | 
157   	 0002	 8775020E		i7 = i7 + (0x20e)			# LN: 14 | 
158   	 0003	 91750001		i1 = i7 - (0x1)			# LN: 14 | 
159   	 0004	 98540001		xmem[i1] = a0h			# LN: 14 | 
160   	 0005	 91750002		i1 = i7 - (0x2)			# LN: 14 | 
161   	 0006	 B0540001		xmem[i1] = i0			# LN: 14 | 
162   	 0007				cline_14_0:			/* LN: 35 | CYCLE: 0 | RULES: () */ 
163   	 0007	 90750002		i0 = i7 - (0x2)			# LN: 35 | 
164   	 0008	 B0140000		i0 = xmem[i0]			# LN: 35 | 
165   	 0009	 91750102		i1 = i7 - (258 - 0)			# LN: 35 | 
166   	 000A	 B8140000		i4 = xmem[i0]			# LN: 35 | 
167   	 000B	 B1090030		i0 = i1			# LN: 35 | 
168   	 000C	 B8090031		i1 = i4			# LN: 35 | 
169   	 000D	 80880000		call (_strcpy)			# LN: 35 | 
170   	 000E				cline_35_0:			/* LN: 36 | CYCLE: 0 | RULES: () */ 
171   	 000E	 90750102		i0 = i7 - (258 - 0)			# LN: 36 | 
172   	 000F	 80880000		call (_cl_wavread_open)			# LN: 36 | 
173   	 0010	 98090030		AnyReg(i0, a0h)			# LN: 36 | 
174   	 0011	 91750103		i1 = i7 - (0x103)			# LN: 36 | 
175   	 0012	 B0540001		xmem[i1] = i0			# LN: 36 | 
176   	 0013				cline_36_0:			/* LN: 37 | CYCLE: 0 | RULES: () */ 
177   	 0013	 90750103		i0 = i7 - (0x103)			# LN: 37 | 
178   	 0014	 88140000		a0 = xmem[i0]			# LN: 37 | 
179   	 0015	 00004E80		a0 & a0			# LN: 37 | 
180   	 0016	 8448001C		if (a != 0) jmp (else_0)			# LN: 37 | 
181   	 0017				cline_37_0:			/* LN: 39 | CYCLE: 0 | RULES: () */ 
182   	 0017	 A0050000		i0 = (0) + (_string_const_0)			# LN: 39 | 
183   	 0018	 91750102		i1 = i7 - (258 - 0)			# LN: 39 | 
184   	 0019	 80880000		call (_printf)			# LN: 39 | 
185   	 001A				cline_39_0:			/* LN: 40 | CYCLE: 0 | RULES: () */ 
186   	 001A	 886AFFFF		halfword(a0) = (0xffff)			# LN: 40 | 
187   	 001B	 800800D0		jmp (__epilogue_234)			# LN: 40 | 
188   	 001C				cline_40_0:			/* LN: 46 | CYCLE: 0 | RULES: () */ 
189   	 001C				endif_0:			/* LN: 37 | CYCLE: 0 | RULES: () */ 
190   	 001C				else_0:			/* LN: 37 | CYCLE: 0 | RULES: () */ 
191   	 001C	 90750103		i0 = i7 - (0x103)			# LN: 46 | 
192   	 001D	 B0140000		i0 = xmem[i0]			# LN: 46 | 
193   	 001E	 80880000		call (_cl_wavread_getnchannels)			# LN: 46 | 
194   	 001F	 90750104		i0 = i7 - (0x104)			# LN: 46 | 
195   	 0020	 98540000		xmem[i0] = a0h			# LN: 46 | 
196   	 0021				cline_46_0:			/* LN: 47 | CYCLE: 0 | RULES: () */ 
197   	 0021	 90750103		i0 = i7 - (0x103)			# LN: 47 | 
198   	 0022	 B0140000		i0 = xmem[i0]			# LN: 47 | 
199   	 0023	 80880000		call (_cl_wavread_bits_per_sample)			# LN: 47 | 
200   	 0024	 90750105		i0 = i7 - (0x105)			# LN: 47 | 
201   	 0025	 98540000		xmem[i0] = a0h			# LN: 47 | 
202   	 0026				cline_47_0:			/* LN: 48 | CYCLE: 0 | RULES: () */ 
203   	 0026	 90750103		i0 = i7 - (0x103)			# LN: 48 | 
204   	 0027	 B0140000		i0 = xmem[i0]			# LN: 48 | 
205   	 0028	 80880000		call (_cl_wavread_frame_rate)			# LN: 48 | 
206   	 0029	 90750106		i0 = i7 - (0x106)			# LN: 48 | 
207   	 002A	 98540000		xmem[i0] = a0h			# LN: 48 | 
208   	 002B				cline_48_0:			/* LN: 49 | CYCLE: 0 | RULES: () */ 
209   	 002B	 90750103		i0 = i7 - (0x103)			# LN: 49 | 
210   	 002C	 B0140000		i0 = xmem[i0]			# LN: 49 | 
211   	 002D	 80880000		call (_cl_wavread_number_of_frames)			# LN: 49 | 
212   	 002E	 90750107		i0 = i7 - (0x107)			# LN: 49 | 
213   	 002F	 98540000		xmem[i0] = a0h			# LN: 49 | 
214   	 0030				cline_49_0:			/* LN: 54 | CYCLE: 0 | RULES: () */ 
215   	 0030	 90750002		i0 = i7 - (0x2)			# LN: 54 | 
216   	 0031	 B0140000		i0 = xmem[i0]			# LN: 54 | 
217   	 0032	 91750207		i1 = i7 - (519 - 0)			# LN: 54 | 
218   	 0033	 02087FFF		i0 += 1			# LN: 54 | 
219   	 0034	 B8140000		i4 = xmem[i0]			# LN: 54 | 
220   	 0035	 B1090030		i0 = i1			# LN: 54 | 
221   	 0036	 B8090031		i1 = i4			# LN: 54 | 
222   	 0037	 80880000		call (_strcpy)			# LN: 54 | 
223   	 0038				cline_54_0:			/* LN: 55 | CYCLE: 0 | RULES: () */ 
224   	 0038	 90750207		i0 = i7 - (519 - 0)			# LN: 55 | 
225   	 0039	 91750105		i1 = i7 - (0x105)			# LN: 55 | 
226   	 003A	 88140001		a0 = xmem[i1]			# LN: 55 | 
227   	 003B	 894A0005		uhalfword(a1) = (0x5)			# LN: 55 | 
228   	 003C	 91750106		i1 = i7 - (0x106)			# LN: 55 | 
229   	 003D	 8C140001		b0 = xmem[i1]			# LN: 55 | 
230   	 003E	 80880000		call (_cl_wavwrite_open)			# LN: 55 | 
231   	 003F	 98090030		AnyReg(i0, a0h)			# LN: 55 | 
232   	 0040	 91750208		i1 = i7 - (0x208)			# LN: 55 | 
233   	 0041	 B0540001		xmem[i1] = i0			# LN: 55 | 
234   	 0042				cline_55_0:			/* LN: 56 | CYCLE: 0 | RULES: () */ 
235   	 0042	 90750208		i0 = i7 - (0x208)			# LN: 56 | 
236   	 0043	 88140000		a0 = xmem[i0]			# LN: 56 | 
237   	 0044	 00004E80		a0 & a0			# LN: 56 | 
238   	 0045	 8448004A		if (a != 0) jmp (else_1)			# LN: 56 | 
239   	 0046				cline_56_0:			/* LN: 58 | CYCLE: 0 | RULES: () */ 
240   	 0046	 A0050000		i0 = (0) + (_string_const_1)			# LN: 58 | 
241   	 0047	 80880000		call (_printf)			# LN: 58 | 
242   	 0048				cline_58_0:			/* LN: 59 | CYCLE: 0 | RULES: () */ 
243   	 0048	 886AFFFF		halfword(a0) = (0xffff)			# LN: 59 | 
244   	 0049	 800800D0		jmp (__epilogue_234)			# LN: 59 | 
245   	 004A				cline_59_0:			/* LN: 63 | CYCLE: 0 | RULES: () */ 
246   	 004A				endif_1:			/* LN: 56 | CYCLE: 0 | RULES: () */ 
247   	 004A				else_1:			/* LN: 56 | CYCLE: 0 | RULES: () */ 
248   	 004A	 A0050000		i0 = (0) + (_string_const_2)			# LN: 63 | 
249   	 004B	 A1050000		i1 = (0) + (_string_const_3)			# LN: 63 | 
250   	 004C	 A4050000		i4 = (0) + (_string_const_4)			# LN: 63 | 
251   	 004D	 884A0006		uhalfword(a0) = (0x6)			# LN: 63 | 
252   	 004E	 A5050000		i5 = (0) + (_string_const_5)			# LN: 63 | 
253   	 004F	 80880000		call (_processing_init)			# LN: 63 | 
254   	 0050	 90750209		i0 = i7 - (0x209)			# LN: 63 | 
255   	 0051	 98540000		xmem[i0] = a0h			# LN: 63 | 
256   	 0052				cline_63_0:			/* LN: 64 | CYCLE: 0 | RULES: () */ 
257   	 0052	 90750209		i0 = i7 - (0x209)			# LN: 64 | 
258   	 0053	 88140000		a0 = xmem[i0]			# LN: 64 | 
259   	 0054	 00004E80		a0 & a0			# LN: 64 | 
260   	 0055	 84080058		if (a == 0) jmp (else_2)			# LN: 64 | 
261   	 0056				cline_64_0:			/* LN: 65 | CYCLE: 0 | RULES: () */ 
262   	 0056	 886AFFFF		halfword(a0) = (0xffff)			# LN: 65 | 
263   	 0057	 800800D0		jmp (__epilogue_234)			# LN: 65 | 
264   	 0058				cline_65_0:			/* LN: 73 | CYCLE: 0 | RULES: () */ 
265   	 0058				endif_2:			/* LN: 64 | CYCLE: 0 | RULES: () */ 
266   	 0058				else_2:			/* LN: 64 | CYCLE: 0 | RULES: () */ 
267   	 0058	 90750107		i0 = i7 - (0x107)			# LN: 73 | 
268   	 0059	 88140000		a0 = xmem[i0]			# LN: 73 | 
269   	 005A	 894A0010		uhalfword(a1) = (0x10)			# LN: 73 | 
270   	 005B	 80880000		call (__div)			# LN: 73 | 
271   	 005C	 9075020A		i0 = i7 - (0x20a)			# LN: 73 | 
272   	 005D	 98540000		xmem[i0] = a0h			# LN: 73 | 
273   	 005E				cline_73_0:			/* LN: 75 | CYCLE: 0 | RULES: () */ 
274   	 005E	 9075020B		i0 = i7 - (0x20b)			# LN: 75 | 
275   	 005F	 00004DC0		a0 = 0			# LN: 75 | 
276   	 0060	 98540000		xmem[i0] = a0h			# LN: 75 | 
277   	 0061				for_0:			/* LN: 75 | CYCLE: 0 | RULES: () */ 
278   	 0061	 9075020B		i0 = i7 - (0x20b)			# LN: 75 | 
279   	 0062	 88140000		a0 = xmem[i0]			# LN: 75 | 
280   	 0063	 9075020A		i0 = i7 - (0x20a)			# LN: 75 | 
281   	 0064	 89140000		a1 = xmem[i0]			# LN: 75 | 
282   	 0065	 00004F08		a0 - a1			# LN: 75 | 
283   	 0066	 84C800C8		if (a >= 0) jmp (for_end_0)			# LN: 75 | 
284   	 0067				cline_75_0:			/* LN: 77 | CYCLE: 0 | RULES: () */ 
285   	 0067	 9075020C		i0 = i7 - (0x20c)			# LN: 77 | 
286   	 0068	 00004DC0		a0 = 0			# LN: 77 | 
287   	 0069	 98540000		xmem[i0] = a0h			# LN: 77 | 
288   	 006A	 81000092		do (0x10), label_end_92			# LN: 77 | 
289   	 006B				cline_77_0:			/* LN: 79 | CYCLE: 0 | RULES: () */ 
290   	 006B				label_begin_92:			/* LN: 77 | CYCLE: 0 | RULES: () */ 
291   	 006B	 9075020D		i0 = i7 - (0x20d)			# LN: 79 | 
292   	 006C	 00004DC0		a0 = 0			# LN: 79 | 
293   	 006D	 98540000		xmem[i0] = a0h			# LN: 79 | 
294   	 006E				for_2:			/* LN: 79 | CYCLE: 0 | RULES: () */ 
295   	 006E	 9075020D		i0 = i7 - (0x20d)			# LN: 79 | 
296   	 006F	 88140000		a0 = xmem[i0]			# LN: 79 | 
297   	 0070	 90750104		i0 = i7 - (0x104)			# LN: 79 | 
298   	 0071	 89140000		a1 = xmem[i0]			# LN: 79 | 
299   	 0072	 00004F08		a0 - a1			# LN: 79 | 
300   	 0073	 84C8008D		if (a >= 0) jmp (for_end_2)			# LN: 79 | 
301   	 0074				cline_79_0:			/* LN: 81 | CYCLE: 0 | RULES: () */ 
302   	 0074	 90750103		i0 = i7 - (0x103)			# LN: 81 | 
303   	 0075	 B0140000		i0 = xmem[i0]			# LN: 81 | 
304   	 0076	 80880000		call (_cl_wavread_recvsample)			# LN: 81 | 
305   	 0077	 9075020E		i0 = i7 - (0x20e)			# LN: 81 | 
306   	 0078	 98540000		xmem[i0] = a0h			# LN: 81 | 
307   	 0079				cline_81_0:			/* LN: 82 | CYCLE: 0 | RULES: () */ 
308   	 0079	 9075020D		i0 = i7 - (0x20d)			# LN: 82 | 
309   	 007A	 88140000		a0 = xmem[i0]			# LN: 82 | 
310   	 007B	 00004EC0		a0 = a0 << 4			# LN: 82 | 
311   	 007C	 48707FFF		i0 = a0			# LN: 82 | 
312   	 007D	 9175020C		i1 = i7 - (0x20c)			# LN: 82 | 
313   	 007E	 80050000		i0 = i0 + (_sampleBuffer + 0)			# LN: 82 | 
314   	 007F	 88140001		a0 = xmem[i1]			# LN: 82 | 
315   	 0080	 09707FFF		a1 = i0			# LN: 82 | 
316   	 0081	 00004480		a0 = a1 + a0			# LN: 82 | 
317   	 0082	 98090030		AnyReg(i0, a0h)			# LN: 82 | 
318   	 0083	 9175020E		i1 = i7 - (0x20e)			# LN: 82 | 
319   	 0084	 88140001		a0 = xmem[i1]			# LN: 82 | 
320   	 0085	 98D40000		ymem[i0] = a0h			# LN: 82 | 
321   	 0086				cline_82_0:			/* LN: 79 | CYCLE: 0 | RULES: () */ 
322   	 0086				init_latch_label_0:			/* LN: 83 | CYCLE: 0 | RULES: () */ 
323   	 0086	 9075020D		i0 = i7 - (0x20d)			# LN: 79 | 
324   	 0087	 88140000		a0 = xmem[i0]			# LN: 79 | 
325   	 0088	 894A0001		uhalfword(a1) = (0x1)			# LN: 79 | 
326   	 0089	 00004408		a0 = a0 + a1			# LN: 79 | 
327   	 008A	 9075020D		i0 = i7 - (0x20d)			# LN: 79 | 
328   	 008B	 98540000		xmem[i0] = a0h			# LN: 79 | 
329   	 008C	 8008006E		jmp (for_2)			# LN: 79 | 
330   	 008D				cline_79_1:			/* LN: 77 | CYCLE: 0 | RULES: () */ 
331   	 008D				init_latch_label_1:			/* LN: 84 | CYCLE: 0 | RULES: () */ 
332   	 008D				for_end_2:			/* LN: 79 | CYCLE: 0 | RULES: () */ 
333   	 008D	 9075020C		i0 = i7 - (0x20c)			# LN: 77 | 
334   	 008E	 88140000		a0 = xmem[i0]			# LN: 77 | 
335   	 008F	 894A0001		uhalfword(a1) = (0x1)			# LN: 77 | 
336   	 0090	 00004408		a0 = a0 + a1			# LN: 77 | 
337   	 0091	 9075020C		i0 = i7 - (0x20c)			# LN: 77 | 
338   	 0092				label_end_92:			# LN: 77 | CYCLE: 5 | RULES: ()
339   	 0092	 98540000		xmem[i0] = a0h			# LN: 77 | 
340   	 0093				cline_77_1:			/* LN: 88 | CYCLE: 0 | RULES: () */ 
341   	 0093				for_end_1:			/* LN: 77 | CYCLE: 0 | RULES: () */ 
342   	 0093	 88040003		a0 = xmem[_processingState + 3]			# LN: 88 | 
343   	 0094	 A04A0000		a0g = (0x0)			# LN: 88 | 
344   	 0095	 00004E80		a0 & a0			# LN: 88 | 
345   	 0096	 8408009B		if (a == 0) jmp (else_3)			# LN: 88 | 
346   	 0097				cline_88_0:			/* LN: 89 | CYCLE: 0 | RULES: () */ 
347   	 0097	 A0050000		i0 = (0) + (_sampleBuffer)			# LN: 89 | 
348   	 0098	 A1050000		i1 = (0) + (_sampleBuffer)			# LN: 89 | 
349   	 0099	 80880000		call (_processing)			# LN: 89 | 
350   	 009A	 8008009B		jmp (endif_3)			# LN: 89 | 
351   	 009B				cline_89_0:			/* LN: 92 | CYCLE: 0 | RULES: () */ 
352   	 009B				endif_3:			/* LN: 88 | CYCLE: 0 | RULES: () */ 
353   	 009B				else_3:			/* LN: 88 | CYCLE: 0 | RULES: () */ 
354   	 009B	 9075020C		i0 = i7 - (0x20c)			# LN: 92 | 
355   	 009C	 00004DC0		a0 = 0			# LN: 92 | 
356   	 009D	 98540000		xmem[i0] = a0h			# LN: 92 | 
357   	 009E	 810000C0		do (0x10), label_end_94			# LN: 92 | 
358   	 009F				cline_92_0:			/* LN: 94 | CYCLE: 0 | RULES: () */ 
359   	 009F				label_begin_94:			/* LN: 92 | CYCLE: 0 | RULES: () */ 
360   	 009F	 9075020D		i0 = i7 - (0x20d)			# LN: 94 | 
361   	 00A0	 00004DC0		a0 = 0			# LN: 94 | 
362   	 00A1	 98540000		xmem[i0] = a0h			# LN: 94 | 
363   	 00A2	 805000BA		do (0x5), label_end_93			# LN: 94 | 
364   	 00A3				cline_94_0:			/* LN: 96 | CYCLE: 0 | RULES: () */ 
365   	 00A3				label_begin_93:			/* LN: 94 | CYCLE: 0 | RULES: () */ 
366   	 00A3	 9075020D		i0 = i7 - (0x20d)			# LN: 96 | 
367   	 00A4	 88140000		a0 = xmem[i0]			# LN: 96 | 
368   	 00A5	 00004EC0		a0 = a0 << 4			# LN: 96 | 
369   	 00A6	 48707FFF		i0 = a0			# LN: 96 | 
370   	 00A7	 9175020C		i1 = i7 - (0x20c)			# LN: 96 | 
371   	 00A8	 80050000		i0 = i0 + (_sampleBuffer + 0)			# LN: 96 | 
372   	 00A9	 88140001		a0 = xmem[i1]			# LN: 96 | 
373   	 00AA	 09707FFF		a1 = i0			# LN: 96 | 
374   	 00AB	 00004480		a0 = a1 + a0			# LN: 96 | 
375   	 00AC	 98090030		AnyReg(i0, a0h)			# LN: 96 | 
376   	 00AD	 9175020E		i1 = i7 - (0x20e)			# LN: 96 | 
377   	 00AE	 88940000		a0 = ymem[i0]			# LN: 96 | 
378   	 00AF	 98540001		xmem[i1] = a0h			# LN: 96 | 
379   	 00B0				cline_96_0:			/* LN: 97 | CYCLE: 0 | RULES: () */ 
380   	 00B0	 90750208		i0 = i7 - (0x208)			# LN: 97 | 
381   	 00B1	 9175020E		i1 = i7 - (0x20e)			# LN: 97 | 
382   	 00B2	 88140001		a0 = xmem[i1]			# LN: 97 | 
383   	 00B3	 B0140000		i0 = xmem[i0]			# LN: 97 | 
384   	 00B4	 80880000		call (_cl_wavwrite_sendsample)			# LN: 97 | 
385   	 00B5				cline_97_0:			/* LN: 94 | CYCLE: 0 | RULES: () */ 
386   	 00B5				init_latch_label_2:			/* LN: 98 | CYCLE: 0 | RULES: () */ 
387   	 00B5	 9075020D		i0 = i7 - (0x20d)			# LN: 94 | 
388   	 00B6	 88140000		a0 = xmem[i0]			# LN: 94 | 
389   	 00B7	 894A0001		uhalfword(a1) = (0x1)			# LN: 94 | 
390   	 00B8	 00004408		a0 = a0 + a1			# LN: 94 | 
391   	 00B9	 9075020D		i0 = i7 - (0x20d)			# LN: 94 | 
392   	 00BA				label_end_93:			# LN: 94 | CYCLE: 5 | RULES: ()
393   	 00BA	 98540000		xmem[i0] = a0h			# LN: 94 | 
394   	 00BB				cline_94_1:			/* LN: 92 | CYCLE: 0 | RULES: () */ 
395   	 00BB				init_latch_label_3:			/* LN: 99 | CYCLE: 0 | RULES: () */ 
396   	 00BB				for_end_4:			/* LN: 94 | CYCLE: 0 | RULES: () */ 
397   	 00BB	 9075020C		i0 = i7 - (0x20c)			# LN: 92 | 
398   	 00BC	 88140000		a0 = xmem[i0]			# LN: 92 | 
399   	 00BD	 894A0001		uhalfword(a1) = (0x1)			# LN: 92 | 
400   	 00BE	 00004408		a0 = a0 + a1			# LN: 92 | 
401   	 00BF	 9075020C		i0 = i7 - (0x20c)			# LN: 92 | 
402   	 00C0				label_end_94:			# LN: 92 | CYCLE: 5 | RULES: ()
403   	 00C0	 98540000		xmem[i0] = a0h			# LN: 92 | 
404   	 00C1				cline_92_1:			/* LN: 75 | CYCLE: 0 | RULES: () */ 
405   	 00C1				init_latch_label_4:			/* LN: 100 | CYCLE: 0 | RULES: () */ 
406   	 00C1				for_end_3:			/* LN: 92 | CYCLE: 0 | RULES: () */ 
407   	 00C1	 9075020B		i0 = i7 - (0x20b)			# LN: 75 | 
408   	 00C2	 88140000		a0 = xmem[i0]			# LN: 75 | 
409   	 00C3	 894A0001		uhalfword(a1) = (0x1)			# LN: 75 | 
410   	 00C4	 00004408		a0 = a0 + a1			# LN: 75 | 
411   	 00C5	 9075020B		i0 = i7 - (0x20b)			# LN: 75 | 
412   	 00C6	 98540000		xmem[i0] = a0h			# LN: 75 | 
413   	 00C7	 80080061		jmp (for_0)			# LN: 75 | 
414   	 00C8				cline_75_1:			/* LN: 107 | CYCLE: 0 | RULES: () */ 
415   	 00C8				for_end_0:			/* LN: 75 | CYCLE: 0 | RULES: () */ 
416   	 00C8	 90750103		i0 = i7 - (0x103)			# LN: 107 | 
417   	 00C9	 B0140000		i0 = xmem[i0]			# LN: 107 | 
418   	 00CA	 80880000		call (_cl_wavread_close)			# LN: 107 | 
419   	 00CB				cline_107_0:			/* LN: 108 | CYCLE: 0 | RULES: () */ 
420   	 00CB	 90750208		i0 = i7 - (0x208)			# LN: 108 | 
421   	 00CC	 B0140000		i0 = xmem[i0]			# LN: 108 | 
422   	 00CD	 80880000		call (_cl_wavwrite_close)			# LN: 108 | 
423   	 00CE				cline_108_0:			/* LN: 111 | CYCLE: 0 | RULES: () */ 
424   	 00CE	 00004DC0		a0 = 0			# LN: 111 | 
425   	 00CF	 800800D0		jmp (__epilogue_234)			# LN: 111 | 
426   	 00D0				cline_111_0:			/* LN: 112 | CYCLE: 0 | RULES: () */ 
427   	 00D0				__epilogue_234:			/* LN: 112 | CYCLE: 0 | RULES: () */ 
428   	 00D0	 9775020E		i7 = i7 - (0x20e)			# LN: 112 | 
429   	 00D1	 02177FFF		i7 -= 1			# LN: 112 | 
430   	 00D2	 81880000		ret			# LN: 112 | 
431   						(null)
				 SYMBOL TABLE 

    Name                                                                                    Type                  Value 

_COMMON_INC_PATH_                                                               					 Define                 "C:/CirrusDSP/crystal32/common/inc/"
_DSP_                                                                           					 Define                 "a"
_LOCAL_INC_PATH_                                                                					 Define                 "inc/"
_LOCAL_SRC_PATH_                                                                					 Define                 "src/"
_MUI_VERSION_                                                                   					 Define                 "020000"
_OVLY_                                                                          					 Define                 "standalone"
_OVLY_REVISION_                                                                 					 Define                 "020000"
_ROUTER_INC_PATH_                                                               					 Define                 "rom_inc/"
_SLOT_                                                                          					 Define                 "0"
_TARGET_FAMILY_                                                                 					 Define                 "crystal32"
_TOOLS_VERSION_                                                                 					 Define                 "0x0701"
_VERSION_                                                                       					 Define                 "00"
__CASM_VER__                                                                    			  Unused Variable		        0 (701H)
__div                                                                           					 External   
__epilogue_234                                                                  			         Relocatable         main_GEN_0010:00D0H
__start                                                                         					 External   
_cl_wavread_bits_per_sample                                                     					 External   
_cl_wavread_close                                                               					 External   
_cl_wavread_frame_rate                                                          					 External   
_cl_wavread_getnchannels                                                        					 External   
_cl_wavread_number_of_frames                                                    					 External   
_cl_wavread_open                                                                					 External   
_cl_wavread_recvsample                                                          					 External   
_cl_wavwrite_close                                                              					 External   
_cl_wavwrite_open                                                               					 External   
_cl_wavwrite_sendsample                                                         					 External   
_headroom_gain                                                                  			  Public Relocatable       main_GEN_0000:0000H
_input_gain                                                                     			  Public Relocatable       main_GEN_0001:0000H
_main                                                                           			  Public Relocatable       main_GEN_0010:0000H
_printf                                                                         					 External   
_processing                                                                     					 External   
_processingState                                                                			  Public Relocatable       main_GEN_0002:0000H
_processing_init                                                                					 External   
_sampleBuffer                                                                   			  Public Relocatable       main_GEN_0003:0000H
_strcpy                                                                         					 External   
_string_const_0                                                                 			         Relocatable         main_GEN_0004:0000H
_string_const_1                                                                 			         Relocatable         main_GEN_0005:0000H
_string_const_2                                                                 			         Relocatable         main_GEN_0006:0000H
_string_const_3                                                                 			         Relocatable         main_GEN_0007:0000H
_string_const_4                                                                 			         Relocatable         main_GEN_0008:0000H
_string_const_5                                                                 			         Relocatable         main_GEN_0009:0000H
cline_107_0                                                                     			  Unused Relocatable        main_GEN_0010:00CBH
cline_108_0                                                                     			  Unused Relocatable        main_GEN_0010:00CEH
cline_111_0                                                                     			  Unused Relocatable        main_GEN_0010:00D0H
cline_14_0                                                                      			  Unused Relocatable        main_GEN_0010:0007H
cline_35_0                                                                      			  Unused Relocatable        main_GEN_0010:000EH
cline_36_0                                                                      			  Unused Relocatable        main_GEN_0010:0013H
cline_37_0                                                                      			  Unused Relocatable        main_GEN_0010:0017H
cline_39_0                                                                      			  Unused Relocatable        main_GEN_0010:001AH
cline_40_0                                                                      			  Unused Relocatable        main_GEN_0010:001CH
cline_46_0                                                                      			  Unused Relocatable        main_GEN_0010:0021H
cline_47_0                                                                      			  Unused Relocatable        main_GEN_0010:0026H
cline_48_0                                                                      			  Unused Relocatable        main_GEN_0010:002BH
cline_49_0                                                                      			  Unused Relocatable        main_GEN_0010:0030H
cline_54_0                                                                      			  Unused Relocatable        main_GEN_0010:0038H
cline_55_0                                                                      			  Unused Relocatable        main_GEN_0010:0042H
cline_56_0                                                                      			  Unused Relocatable        main_GEN_0010:0046H
cline_58_0                                                                      			  Unused Relocatable        main_GEN_0010:0048H
cline_59_0                                                                      			  Unused Relocatable        main_GEN_0010:004AH
cline_63_0                                                                      			  Unused Relocatable        main_GEN_0010:0052H
cline_64_0                                                                      			  Unused Relocatable        main_GEN_0010:0056H
cline_65_0                                                                      			  Unused Relocatable        main_GEN_0010:0058H
cline_73_0                                                                      			  Unused Relocatable        main_GEN_0010:005EH
cline_75_0                                                                      			  Unused Relocatable        main_GEN_0010:0067H
cline_75_1                                                                      			  Unused Relocatable        main_GEN_0010:00C8H
cline_77_0                                                                      			  Unused Relocatable        main_GEN_0010:006BH
cline_77_1                                                                      			  Unused Relocatable        main_GEN_0010:0093H
cline_79_0                                                                      			  Unused Relocatable        main_GEN_0010:0074H
cline_79_1                                                                      			  Unused Relocatable        main_GEN_0010:008DH
cline_81_0                                                                      			  Unused Relocatable        main_GEN_0010:0079H
cline_82_0                                                                      			  Unused Relocatable        main_GEN_0010:0086H
cline_88_0                                                                      			  Unused Relocatable        main_GEN_0010:0097H
cline_89_0                                                                      			  Unused Relocatable        main_GEN_0010:009BH
cline_92_0                                                                      			  Unused Relocatable        main_GEN_0010:009FH
cline_92_1                                                                      			  Unused Relocatable        main_GEN_0010:00C1H
cline_94_0                                                                      			  Unused Relocatable        main_GEN_0010:00A3H
cline_94_1                                                                      			  Unused Relocatable        main_GEN_0010:00BBH
cline_96_0                                                                      			  Unused Relocatable        main_GEN_0010:00B0H
cline_97_0                                                                      			  Unused Relocatable        main_GEN_0010:00B5H
dummy                                                                           			  Unused Number				     0 (0H)
else_0                                                                          			         Relocatable         main_GEN_0010:001CH
else_1                                                                          			         Relocatable         main_GEN_0010:004AH
else_2                                                                          			         Relocatable         main_GEN_0010:0058H
else_3                                                                          			         Relocatable         main_GEN_0010:009BH
endif_0                                                                         			  Unused Relocatable        main_GEN_0010:001CH
endif_1                                                                         			  Unused Relocatable        main_GEN_0010:004AH
endif_2                                                                         			  Unused Relocatable        main_GEN_0010:0058H
endif_3                                                                         			         Relocatable         main_GEN_0010:009BH
for_0                                                                           			         Relocatable         main_GEN_0010:0061H
for_2                                                                           			         Relocatable         main_GEN_0010:006EH
for_end_0                                                                       			         Relocatable         main_GEN_0010:00C8H
for_end_1                                                                       			  Unused Relocatable        main_GEN_0010:0093H
for_end_2                                                                       			         Relocatable         main_GEN_0010:008DH
for_end_3                                                                       			  Unused Relocatable        main_GEN_0010:00C1H
for_end_4                                                                       			  Unused Relocatable        main_GEN_0010:00BBH
init_latch_label_0                                                              			  Unused Relocatable        main_GEN_0010:0086H
init_latch_label_1                                                              			  Unused Relocatable        main_GEN_0010:008DH
init_latch_label_2                                                              			  Unused Relocatable        main_GEN_0010:00B5H
init_latch_label_3                                                              			  Unused Relocatable        main_GEN_0010:00BBH
init_latch_label_4                                                              			  Unused Relocatable        main_GEN_0010:00C1H
label_begin_92                                                                  			  Unused Relocatable        main_GEN_0010:006BH
label_begin_93                                                                  			  Unused Relocatable        main_GEN_0010:00A3H
label_begin_94                                                                  			  Unused Relocatable        main_GEN_0010:009FH
label_end_92                                                                    			         Relocatable         main_GEN_0010:0092H
label_end_93                                                                    			         Relocatable         main_GEN_0010:00BAH
label_end_94                                                                    			         Relocatable         main_GEN_0010:00C0H

	       SEGMENTS:

Size			  Name										 Class
0000H	 __INIT                                  			 CODE                                    
0001H	 main_GEN_0000                           			 X_OVLY                                  
0001H	 main_GEN_0001                           			 X_OVLY                                  
0004H	 main_GEN_0002                           			 X_OVLY                                  
0080H	 main_GEN_0003                           			 Y_OVLY                                  
002BH	 main_GEN_0004                           			 X_OVLY                                  
0028H	 main_GEN_0005                           			 X_OVLY                                  
0002H	 main_GEN_0006                           			 X_OVLY                                  
0002H	 main_GEN_0007                           			 X_OVLY                                  
0002H	 main_GEN_0008                           			 X_OVLY                                  
0003H	 main_GEN_0009                           			 X_OVLY                                  
00D3H	 main_GEN_0010                           			 CODE_OVLY                               
