1     	 0000					.public _echoState
2     	 0000					.public _echo_buffer
3     	 0000					.public _initial_delay
4     	 0000					.public _initial_gain
5     	 0000					.public _initial_input_gain
6     	 0000					.public _sampleBuffer
7     	 0000					.public _tap_gain_ymem
8     	 0000					.extern _cl_wavread_bits_per_sample
9     	 0000					.extern _cl_wavread_close
10    	 0000					.extern _cl_wavread_frame_rate
11    	 0000					.extern _cl_wavread_getnchannels
12    	 0000					.extern _cl_wavread_number_of_frames
13    	 0000					.extern _cl_wavread_open
14    	 0000					.extern _cl_wavread_recvsample
15    	 0000					.extern _cl_wavwrite_close
16    	 0000					.extern _cl_wavwrite_open
17    	 0000					.extern _cl_wavwrite_sendsample
18    	 0000					.public _main
19    	 0000					.extern _multitap_echo
20    	 0000					.public _multitap_echo1
21    	 0000					.public _multitap_echo_init
22    	 0000					.extern _printf
23    	 0000					.extern _strcpy
24    	 0000					.extern __div
25    							.xdata_ovly
25     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
26    						S_echoState_0	.struct
27    						_pEchoBuff	.dw (0x0)
28    						_bufferLength	.dw (0x0)
29    						_writePointer	.dw (0x0)
30    						_readPointer	.dw (0x0)
31    							.dw (0x0)
32    							.dw (0x0)
33    							.dw (0x0)
34    						_delay	.dw (0x0)
35    							.dw (0x0)
36    							.dw (0x0)
37    							.dw (0x0)
38    						_input_gain	.dw (0x0)
39    						_tap_gain	.dw (0x0)
40    						_n_tap	.dw (0x0)
41    							.endstruct
42    						
43    							.xdata_ovly
43     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
44    	 0000				(null)	 0000	 00000000	 
44    	 0001				(null)	 0001	 00000000	 
44    	 0002				(null)	 0002	 00000000	 
44    	 0003				(null)	 0003	 00000000	 
44    	 0004				(null)	 0004	 00000000	 
44    	 0005				(null)	 0005	 00000000	 
44    	 0006				(null)	 0006	 00000000	 
44    	 0007				(null)	 0007	 00000000	 
44    	 0008				(null)	 0008	 00000000	 
44    	 0009				(null)	 0009	 00000000	 
44    	 000A				(null)	 000A	 00000000	 
44    	 000B				(null)	 000B	 00000000	 
44    	 000C				(null)	 000C	 00000000	 
44    	 000D				(null)	 000D	 00000000	 
44    						_echoState S_echoState_0
45    						
46    							.xdata_ovly align 4096
46     >> start of macro: .xdata_ovly align
1+    									seg_align , "X_OVLY", X, 4096
1+     >> start of macro: seg_align
1+    						    SEGMENT "X_OVLY" ALIGN( 4096 )
2+    						  .if "" != ""
3+    						___SegStart_X_
4+    						  .endif
5+    							#RememberSegmentType
6+     >> end of macro: seg_align
2+     >> end of macro: .xdata_ovly align
47    	 0000				_echo_buffer
48    	 0000					.bss (0x1000)
49    							.xdata_ovly
49     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
50    	 0000				_initial_delay
51    	 0000					.dw  (0x400)
	 0000	 00000400	 
52    	 0001					.dw  (0x600)
	 0001	 00000600	 
53    	 0002					.dw  (0xa00)
	 0002	 00000A00	 
54    	 0003					.dw  (0xc00)
	 0003	 00000C00	 
55    							.xdata_ovly
55     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
56    	 0000				_initial_gain
57    	 0000					.dw  (0x20000000)
	 0000	 20000000	 
58    	 0001					.dw  (0x10000000)
	 0001	 10000000	 
59    	 0002					.dw  (0x8000000)
	 0002	 08000000	 
60    	 0003					.dw  (0x8000000)
	 0003	 08000000	 
61    							.xdata_ovly
61     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
62    	 0000				_initial_input_gain
63    	 0000					.dw  (0x40000000)
	 0000	 40000000	 
64    							.ydata_ovly
64     >> start of macro: .ydata_ovly
1+    									seg_single , "Y_OVLY", Y
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_Y_ )
2+    						    segment
3+    						  .else
4+    						    segment "Y_OVLY"
5+    							.if "" != ""
6+    						___SegStart_Y_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .ydata_ovly
65    	 0000				_sampleBuffer
66    	 0000					.bss (0x80)
67    							.xdata_ovly
67     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
68    	 0000				_string_const_0
69    	 0000					.dw  (0x2e)
	 0000	 0000002E	 
70    	 0001					.dw  (0x2e)
	 0001	 0000002E	 
71    	 0002					.dw  (0x2f)
	 0002	 0000002F	 
72    	 0003					.dw  (0x2e)
	 0003	 0000002E	 
73    	 0004					.dw  (0x2e)
	 0004	 0000002E	 
74    	 0005					.dw  (0x2f)
	 0005	 0000002F	 
75    	 0006					.dw  (0x54)
	 0006	 00000054	 
76    	 0007					.dw  (0x65)
	 0007	 00000065	 
77    	 0008					.dw  (0x73)
	 0008	 00000073	 
78    	 0009					.dw  (0x74)
	 0009	 00000074	 
79    	 000A					.dw  (0x53)
	 000A	 00000053	 
80    	 000B					.dw  (0x74)
	 000B	 00000074	 
81    	 000C					.dw  (0x72)
	 000C	 00000072	 
82    	 000D					.dw  (0x65)
	 000D	 00000065	 
83    	 000E					.dw  (0x61)
	 000E	 00000061	 
84    	 000F					.dw  (0x6d)
	 000F	 0000006D	 
85    	 0010					.dw  (0x73)
	 0010	 00000073	 
86    	 0011					.dw  (0x2f)
	 0011	 0000002F	 
87    	 0012					.dw  (0x73)
	 0012	 00000073	 
88    	 0013					.dw  (0x70)
	 0013	 00000070	 
89    	 0014					.dw  (0x65)
	 0014	 00000065	 
90    	 0015					.dw  (0x65)
	 0015	 00000065	 
91    	 0016					.dw  (0x63)
	 0016	 00000063	 
92    	 0017					.dw  (0x68)
	 0017	 00000068	 
93    	 0018					.dw  (0x2e)
	 0018	 0000002E	 
94    	 0019					.dw  (0x77)
	 0019	 00000077	 
95    	 001A					.dw  (0x61)
	 001A	 00000061	 
96    	 001B					.dw  (0x76)
	 001B	 00000076	 
97    	 001C					.dw  (0x0)
	 001C	 00000000	 
98    							.xdata_ovly
98     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
99    	 0000				_string_const_1
100   	 0000					.dw  (0x45)
	 0000	 00000045	 
101   	 0001					.dw  (0x72)
	 0001	 00000072	 
102   	 0002					.dw  (0x72)
	 0002	 00000072	 
103   	 0003					.dw  (0x6f)
	 0003	 0000006F	 
104   	 0004					.dw  (0x72)
	 0004	 00000072	 
105   	 0005					.dw  (0x3a)
	 0005	 0000003A	 
106   	 0006					.dw  (0x20)
	 0006	 00000020	 
107   	 0007					.dw  (0x43)
	 0007	 00000043	 
108   	 0008					.dw  (0x6f)
	 0008	 0000006F	 
109   	 0009					.dw  (0x75)
	 0009	 00000075	 
110   	 000A					.dw  (0x6c)
	 000A	 0000006C	 
111   	 000B					.dw  (0x64)
	 000B	 00000064	 
112   	 000C					.dw  (0x20)
	 000C	 00000020	 
113   	 000D					.dw  (0x6e)
	 000D	 0000006E	 
114   	 000E					.dw  (0x6f)
	 000E	 0000006F	 
115   	 000F					.dw  (0x74)
	 000F	 00000074	 
116   	 0010					.dw  (0x20)
	 0010	 00000020	 
117   	 0011					.dw  (0x6f)
	 0011	 0000006F	 
118   	 0012					.dw  (0x70)
	 0012	 00000070	 
119   	 0013					.dw  (0x65)
	 0013	 00000065	 
120   	 0014					.dw  (0x6e)
	 0014	 0000006E	 
121   	 0015					.dw  (0x20)
	 0015	 00000020	 
122   	 0016					.dw  (0x69)
	 0016	 00000069	 
123   	 0017					.dw  (0x6e)
	 0017	 0000006E	 
124   	 0018					.dw  (0x70)
	 0018	 00000070	 
125   	 0019					.dw  (0x75)
	 0019	 00000075	 
126   	 001A					.dw  (0x74)
	 001A	 00000074	 
127   	 001B					.dw  (0x20)
	 001B	 00000020	 
128   	 001C					.dw  (0x77)
	 001C	 00000077	 
129   	 001D					.dw  (0x61)
	 001D	 00000061	 
130   	 001E					.dw  (0x76)
	 001E	 00000076	 
131   	 001F					.dw  (0x65)
	 001F	 00000065	 
132   	 0020					.dw  (0x66)
	 0020	 00000066	 
133   	 0021					.dw  (0x69)
	 0021	 00000069	 
134   	 0022					.dw  (0x6c)
	 0022	 0000006C	 
135   	 0023					.dw  (0x65)
	 0023	 00000065	 
136   	 0024					.dw  (0x2e)
	 0024	 0000002E	 
137   	 0025					.dw  (0xa)
	 0025	 0000000A	 
138   	 0026					.dw  (0x0)
	 0026	 00000000	 
139   							.xdata_ovly
139    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
140   	 0000				_string_const_2
141   	 0000					.dw  (0x2e)
	 0000	 0000002E	 
142   	 0001					.dw  (0x2e)
	 0001	 0000002E	 
143   	 0002					.dw  (0x2f)
	 0002	 0000002F	 
144   	 0003					.dw  (0x4f)
	 0003	 0000004F	 
145   	 0004					.dw  (0x75)
	 0004	 00000075	 
146   	 0005					.dw  (0x74)
	 0005	 00000074	 
147   	 0006					.dw  (0x53)
	 0006	 00000053	 
148   	 0007					.dw  (0x74)
	 0007	 00000074	 
149   	 0008					.dw  (0x72)
	 0008	 00000072	 
150   	 0009					.dw  (0x65)
	 0009	 00000065	 
151   	 000A					.dw  (0x61)
	 000A	 00000061	 
152   	 000B					.dw  (0x6d)
	 000B	 0000006D	 
153   	 000C					.dw  (0x73)
	 000C	 00000073	 
154   	 000D					.dw  (0x2f)
	 000D	 0000002F	 
155   	 000E					.dw  (0x6f)
	 000E	 0000006F	 
156   	 000F					.dw  (0x75)
	 000F	 00000075	 
157   	 0010					.dw  (0x74)
	 0010	 00000074	 
158   	 0011					.dw  (0x5f)
	 0011	 0000005F	 
159   	 0012					.dw  (0x73)
	 0012	 00000073	 
160   	 0013					.dw  (0x70)
	 0013	 00000070	 
161   	 0014					.dw  (0x65)
	 0014	 00000065	 
162   	 0015					.dw  (0x65)
	 0015	 00000065	 
163   	 0016					.dw  (0x63)
	 0016	 00000063	 
164   	 0017					.dw  (0x68)
	 0017	 00000068	 
165   	 0018					.dw  (0x5f)
	 0018	 0000005F	 
166   	 0019					.dw  (0x33)
	 0019	 00000033	 
167   	 001A					.dw  (0x2e)
	 001A	 0000002E	 
168   	 001B					.dw  (0x77)
	 001B	 00000077	 
169   	 001C					.dw  (0x61)
	 001C	 00000061	 
170   	 001D					.dw  (0x76)
	 001D	 00000076	 
171   	 001E					.dw  (0x0)
	 001E	 00000000	 
172   							.xdata_ovly
172    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
173   	 0000				_string_const_3
174   	 0000					.dw  (0x45)
	 0000	 00000045	 
175   	 0001					.dw  (0x72)
	 0001	 00000072	 
176   	 0002					.dw  (0x72)
	 0002	 00000072	 
177   	 0003					.dw  (0x6f)
	 0003	 0000006F	 
178   	 0004					.dw  (0x72)
	 0004	 00000072	 
179   	 0005					.dw  (0x3a)
	 0005	 0000003A	 
180   	 0006					.dw  (0x20)
	 0006	 00000020	 
181   	 0007					.dw  (0x43)
	 0007	 00000043	 
182   	 0008					.dw  (0x6f)
	 0008	 0000006F	 
183   	 0009					.dw  (0x75)
	 0009	 00000075	 
184   	 000A					.dw  (0x6c)
	 000A	 0000006C	 
185   	 000B					.dw  (0x64)
	 000B	 00000064	 
186   	 000C					.dw  (0x20)
	 000C	 00000020	 
187   	 000D					.dw  (0x6e)
	 000D	 0000006E	 
188   	 000E					.dw  (0x6f)
	 000E	 0000006F	 
189   	 000F					.dw  (0x74)
	 000F	 00000074	 
190   	 0010					.dw  (0x20)
	 0010	 00000020	 
191   	 0011					.dw  (0x6f)
	 0011	 0000006F	 
192   	 0012					.dw  (0x70)
	 0012	 00000070	 
193   	 0013					.dw  (0x65)
	 0013	 00000065	 
194   	 0014					.dw  (0x6e)
	 0014	 0000006E	 
195   	 0015					.dw  (0x20)
	 0015	 00000020	 
196   	 0016					.dw  (0x6f)
	 0016	 0000006F	 
197   	 0017					.dw  (0x75)
	 0017	 00000075	 
198   	 0018					.dw  (0x74)
	 0018	 00000074	 
199   	 0019					.dw  (0x70)
	 0019	 00000070	 
200   	 001A					.dw  (0x75)
	 001A	 00000075	 
201   	 001B					.dw  (0x74)
	 001B	 00000074	 
202   	 001C					.dw  (0x20)
	 001C	 00000020	 
203   	 001D					.dw  (0x77)
	 001D	 00000077	 
204   	 001E					.dw  (0x61)
	 001E	 00000061	 
205   	 001F					.dw  (0x76)
	 001F	 00000076	 
206   	 0020					.dw  (0x65)
	 0020	 00000065	 
207   	 0021					.dw  (0x66)
	 0021	 00000066	 
208   	 0022					.dw  (0x69)
	 0022	 00000069	 
209   	 0023					.dw  (0x6c)
	 0023	 0000006C	 
210   	 0024					.dw  (0x65)
	 0024	 00000065	 
211   	 0025					.dw  (0x2e)
	 0025	 0000002E	 
212   	 0026					.dw  (0xa)
	 0026	 0000000A	 
213   	 0027					.dw  (0x0)
	 0027	 00000000	 
214   							.ydata_ovly
214    >> start of macro: .ydata_ovly
1+    									seg_single , "Y_OVLY", Y
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_Y_ )
2+    						    segment
3+    						  .else
4+    						    segment "Y_OVLY"
5+    							.if "" != ""
6+    						___SegStart_Y_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .ydata_ovly
215   	 0000				_tap_gain_ymem
216   	 0000					.bss (0x4)
217   							.code_ovly
217    >> start of macro: .code_ovly
1+    									seg_single , "CODE_OVLY", CODE
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_CODE_ )
2+    						    segment
3+    						  .else
4+    						    segment "CODE_OVLY"
5+    							.if "" != ""
6+    						___SegStart_CODE_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .code_ovly
218   						
219   						
220   						
221   							# This construction should ensure linking of crt0 in case when target is a standalone program without the OS
222   							.if defined(_OVLY_)
223   								.if .strcmp('standalone',_OVLY_)=0
224   								.if .strcmp('crystal32',_TARGET_FAMILY_)=0
225   	 0000							.extern __start         # dummy use of __start to force linkage of crt0
226   	 0000				dummy		.equ(__start)
227   								.else
228   									.extern __intvec         # dummy use of __intvec to force linkage of intvec
229   						dummy		.equ(__intvec)
230   								.endif
231   								.endif
232   							.endif
233   						
234   	 0000				_main:			/* LN: 166 | CYCLE: 0 | RULES: () */ 
235   	 0000	 B2540017		xmem[i7] = i2; i7 += 1			# LN: 166, 166 | 
236   	 0001	 A2540017		xmem[i7] = a2g; i7 += 1			# LN: 166, 166 | 
237   	 0002	 9A540017		xmem[i7] = a2h; i7 += 1			# LN: 166, 166 | 
238   	 0003	 92540017		xmem[i7] = a2l; i7 += 1			# LN: 166, 166 | 
239   	 0004	 B3540017		xmem[i7] = i3; i7 += 1			# LN: 166, 166 | 
240   	 0005	 A3540017		xmem[i7] = a3g; i7 += 1			# LN: 166, 166 | 
241   	 0006	 9B540017		xmem[i7] = a3h; i7 += 1			# LN: 166, 166 | 
242   	 0007	 93540017		xmem[i7] = a3l; i7 += 1			# LN: 166, 166 | 
243   	 0008	 87750200		i7 = i7 + (0x200)			# LN: 166 | 
244   	 0009	 90750100		i0 = i7 - (256 - 0)			# LN: 181 | 
245   	 000A	 A1050000		i1 = (0) + (_string_const_0)			# LN: 181 | 
246   	 000B	 80880000		call (_strcpy)			# LN: 181 | 
247   	 000C	 90750100		i0 = i7 - (256 - 0)			# LN: 182 | 
248   	 000D	 80880000		call (_cl_wavread_open)			# LN: 182 | 
249   	 000E	 98090032		AnyReg(i2, a0h)			# LN: 182 | 
250   	 000F	 08727FFF		a0 = i2			# LN: 183 | 
251   	 0010	 00004E80		a0 & a0			# LN: 183 | 
252   	 0011	 84480016		if (a != 0) jmp (else_0)			# LN: 183 | 
253   	 0012	 A0050000		i0 = (0) + (_string_const_1)			# LN: 185 | 
254   	 0013	 80880000		call (_printf)			# LN: 185 | 
255   	 0014	 886AFFFF		halfword(a0) = (0xffff)			# LN: 186 | 
256   	 0015	 80080067		jmp (__epilogue_228)			# LN: 186 | 
257   	 0016				endif_0:			/* LN: 183 | CYCLE: 0 | RULES: () */ 
258   	 0016				else_0:			/* LN: 183 | CYCLE: 0 | RULES: () */ 
259   	 0016	 B2090030		i0 = i2			# LN: 192 | 
260   	 0017	 80880000		call (_cl_wavread_getnchannels)			# LN: 192 | 
261   	 0018	 00004C02		a2 =+ a0			# LN: 192 | 
262   	 0019	 B2090030		i0 = i2			# LN: 193 | 
263   	 001A	 80880000		call (_cl_wavread_bits_per_sample)			# LN: 193 | 
264   	 001B	 00004C01		a1 =+ a0			# LN: 193 | 
265   	 001C	 B2090030		i0 = i2			# LN: 194 | 
266   	 001D	 80880000		call (_cl_wavread_frame_rate)			# LN: 194 | 
267   	 001E	 00004C24		b0 =+ a0			# LN: 194 | 
268   	 001F	 B2090030		i0 = i2			# LN: 195 | 
269   	 0020	 80880000		call (_cl_wavread_number_of_frames)			# LN: 195 | 
270   	 0021	 90750200		i0 = i7 - (512 - 0)			# LN: 200 | 
271   	 0022	 A1050000		i1 = (0) + (_string_const_2)			# LN: 200 | 
272   	 0023	 00004C25		b1 =+ a0			# LN: 195 | 
273   	 0024	 80880000		call (_strcpy)			# LN: 200 | 
274   	 0025	 90750200		i0 = i7 - (512 - 0)			# LN: 201 | 
275   	 0026	 00004C08		a0 =+ a1			# LN: 201 | 
276   	 0027	 00004C11		a1 =+ a2			# LN: 201 | 
277   	 0028	 80880000		call (_cl_wavwrite_open)			# LN: 201 | 
278   	 0029	 98090033		AnyReg(i3, a0h)			# LN: 201 | 
279   	 002A	 08737FFF		a0 = i3			# LN: 202 | 
280   	 002B	 00004E80		a0 & a0			# LN: 202 | 
281   	 002C	 84480031		if (a != 0) jmp (else_1)			# LN: 202 | 
282   	 002D	 A0050000		i0 = (0) + (_string_const_3)			# LN: 204 | 
283   	 002E	 80880000		call (_printf)			# LN: 204 | 
284   	 002F	 886AFFFF		halfword(a0) = (0xffff)			# LN: 205 | 
285   	 0030	 80080067		jmp (__epilogue_228)			# LN: 205 | 
286   	 0031				endif_1:			/* LN: 202 | CYCLE: 0 | RULES: () */ 
287   	 0031				else_1:			/* LN: 202 | CYCLE: 0 | RULES: () */ 
288   	 0031	 80880091		call (_multitap_echo_init)			# LN: 212 | 
289   	 0032	 894A0010		uhalfword(a1) = (0x10)			# LN: 223 | 
290   	 0033	 00004C28		a0 =+ b1			# LN: 223 | 
291   	 0034	 80880000		call (__div)			# LN: 223 | 
292   	 0035	 98090030		AnyReg(i0, a0h)			# LN: 225 | 
293   	 0036	 00007FFF		nop #empty cycle
294   	 0037	 80010061		do (i0), label_end_98			# LN: 225 | 
295   	 0038				label_begin_98:			/* LN: 225 | CYCLE: 0 | RULES: () */ 
296   	 0038	 00004DC3		a3 = 0			# LN: 227 | 
297   	 0039	 8100004A		do (0x10), label_end_95			# LN: 227 | 
298   	 003A				label_begin_95:			/* LN: 227 | CYCLE: 0 | RULES: () */ 
299   	 003A	 9A090030		AnyReg(i0, a2h)			# LN: 229 | 
300   	 003B	 00004DC4		b0 = 0			# LN: 229 | 
301   	 003C	 80010048		do (i0), label_end_94			# LN: 229 | 
302   	 003D				label_begin_94:			/* LN: 229 | CYCLE: 0 | RULES: () */ 
303   	 003D	 B2090030		i0 = i2			# LN: 231 | 
304   	 003E	 80880000		call (_cl_wavread_recvsample)			# LN: 231 | 
305   	 003F	 00005C01		a1 =+ a0; b1 =+ b0			# LN: 231, 232 | 
306   	 0040	 00004EC5		b1 = b1 << 4			# LN: 232 | 
307   	 0041	 4D704C08		i0 = b1; a0 =+ a1			# LN: 232, 232 | 
308   	 0042	 894A0001		uhalfword(a1) = (0x1)			# LN: 229 | 
309   	 0043	 80050000		i0 = i0 + (_sampleBuffer + 0)			# LN: 232 | 
310   	 0044	 0D70442C		b1 = i0; b0 = b0 + a1			# LN: 232, 229 | 
311   	 0045	 000045A9		a1 = a3 + b1			# LN: 232 | 
312   	 0046	 99090030		AnyReg(i0, a1h)			# LN: 232 | 
313   	 0047	 00007FFF		nop #empty cycle
314   	 0048				label_end_94:			# LN: 229 | CYCLE: 11 | RULES: ()
315   	 0048	 98D40000		ymem[i0] = a0h			# LN: 232 | 
316   	 0049				init_latch_label_5:			/* LN: 234 | CYCLE: 0 | RULES: () */ 
317   	 0049				for_end_6:			/* LN: 229 | CYCLE: 0 | RULES: () */ 
318   	 0049	 884A0001		uhalfword(a0) = (0x1)			# LN: 227 | 
319   	 004A				label_end_95:			# LN: 227 | CYCLE: 1 | RULES: ()
320   	 004A	 00004583		a3 = a3 + a0			# LN: 227 | 
321   	 004B				for_end_5:			/* LN: 227 | CYCLE: 0 | RULES: () */ 
322   	 004B	 A0050000		i0 = (0) + (_sampleBuffer + 0)			# LN: 240 | 
323   	 004C	 A1050000		i1 = (0) + (_sampleBuffer + 0)			# LN: 240 | 
324   	 004D	 80880000		call (_multitap_echo)			# LN: 240 | 
325   	 004E	 00004DC1		a1 = 0			# LN: 243 | 
326   	 004F	 81000060		do (0x10), label_end_97			# LN: 243 | 
327   	 0050				label_begin_97:			/* LN: 243 | CYCLE: 0 | RULES: () */ 
328   	 0050	 9A090030		AnyReg(i0, a2h)			# LN: 245 | 
329   	 0051	 00004DC4		b0 = 0			# LN: 245 | 
330   	 0052	 8001005E		do (i0), label_end_96			# LN: 245 | 
331   	 0053				label_begin_96:			/* LN: 245 | CYCLE: 0 | RULES: () */ 
332   	 0053	 00004C20		a0 =+ b0			# LN: 247 | 
333   	 0054	 00004EC0		a0 = a0 << 4			# LN: 247 | 
334   	 0055	 48717FFF		i1 = a0			# LN: 247 | 
335   	 0056	 B3090030		i0 = i3			# LN: 248 | 
336   	 0057	 81150000		i1 = i1 + (_sampleBuffer + 0)			# LN: 247 | 
337   	 0058	 08717FFF		a0 = i1			# LN: 247 | 
338   	 0059	 00004408		a0 = a0 + a1			# LN: 247 | 
339   	 005A	 98090031		AnyReg(i1, a0h)			# LN: 247 | 
340   	 005B	 884A0001		uhalfword(a0) = (0x1)			# LN: 245 | 
341   	 005C	 2D414424		b1 = ymem[i1]; b0 = b0 + a0			# LN: 247, 245 | 
342   	 005D	 00004C28		a0 =+ b1			# LN: 247 | 
343   	 005E				label_end_96:			# LN: 245 | CYCLE: 11 | RULES: ()
344   	 005E	 80880000		call (_cl_wavwrite_sendsample)			# LN: 248 | 
345   	 005F				init_latch_label_7:			/* LN: 250 | CYCLE: 0 | RULES: () */ 
346   	 005F				for_end_8:			/* LN: 245 | CYCLE: 0 | RULES: () */ 
347   	 005F	 884A0001		uhalfword(a0) = (0x1)			# LN: 243 | 
348   	 0060				label_end_97:			# LN: 243 | CYCLE: 1 | RULES: ()
349   	 0060	 00004481		a1 = a1 + a0			# LN: 243 | 
350   	 0061				init_latch_label_8:			/* LN: 251 | CYCLE: 0 | RULES: () */ 
351   	 0061				for_end_7:			/* LN: 243 | CYCLE: 0 | RULES: () */ 
352   	 0061				label_end_98:			# LN: 225 | CYCLE: 0 | RULES: ()
353   	 0061	 00007FFF		nop #empty cycle
354   	 0062				for_end_4:			/* LN: 225 | CYCLE: 0 | RULES: () */ 
355   	 0062	 B2090030		i0 = i2			# LN: 256 | 
356   	 0063	 80880000		call (_cl_wavread_close)			# LN: 256 | 
357   	 0064	 B3090030		i0 = i3			# LN: 257 | 
358   	 0065	 80880000		call (_cl_wavwrite_close)			# LN: 257 | 
359   	 0066	 00004DC0		a0 = 0			# LN: 260 | 
360   	 0067				__epilogue_228:			/* LN: 261 | CYCLE: 0 | RULES: () */ 
361   	 0067	 97750200		i7 = i7 - (0x200)			# LN: 261 | 
362   	 0068	 02177FFF		i7 -= 1			# LN: 261 | 
363   	 0069	 93140027		a3l = xmem[i7]; i7 -= 1			# LN: 261, 261 | 
364   	 006A	 9B140027		a3h = xmem[i7]; i7 -= 1			# LN: 261, 261 | 
365   	 006B	 A3140027		a3g = xmem[i7]; i7 -= 1			# LN: 261, 261 | 
366   	 006C	 B3140027		i3 = xmem[i7]; i7 -= 1			# LN: 261, 261 | 
367   	 006D	 92140027		a2l = xmem[i7]; i7 -= 1			# LN: 261, 261 | 
368   	 006E	 9A140027		a2h = xmem[i7]; i7 -= 1			# LN: 261, 261 | 
369   	 006F	 A2140027		a2g = xmem[i7]; i7 -= 1			# LN: 261, 261 | 
370   	 0070	 B2140007		i2 = xmem[i7]			# LN: 261 | 
371   	 0071	 81880000		ret			# LN: 261 | 
372   						
373   						
374   						
375   	 0072				_multitap_echo1:			/* LN: 119 | CYCLE: 0 | RULES: () */ 
376   	 0072	 B2540017		xmem[i7] = i2; i7 += 1			# LN: 119, 119 | 
377   	 0073	 B3540017		xmem[i7] = i3; i7 += 1			# LN: 119, 119 | 
378   	 0074	 B8040002		i4 = xmem[_echoState + 2]			# LN: 122 | 
379   	 0075	 8004000B		x0 = xmem[_echoState + 11]			# LN: 123 | 
380   	 0076	 B904000C		i5 = xmem[_echoState + 12]			# LN: 124 | 
381   	 0077	 A2050003		i2 = (0) + (_echoState + 3)			# LN: 125 | 
382   	 0078	 8100008B		do (0x10), label_end_100			# LN: 127 | 
383   	 0079				label_begin_100:			/* LN: 127 | CYCLE: 0 | RULES: () */ 
384   	 0079	 81940000		x1 = ymem[i0]			# LN: 129 | 
385   	 007A	 28482021		a0 = ymem[i0]; i0 += 1; a1 = x1 * x0			# LN: 132, 132, 129 | 
386   	 007B	 98540004		xmem[i4] = a0h			# LN: 132 | 
387   	 007C	 BC4AB001		nm4 = (0xb001)			# LN: -1 | 
388   	 007D	 8804000D		a0 = xmem[_echoState + 13]			# LN: 135 | 
389   	 007E	 021C7FFF		i4 += n			# LN: 133 | 
390   	 007F	 98090033		AnyReg(i3, a0h)			# LN: 135 | 
391   	 0080	 BC4A0000		nm4 = (0x0)			# LN: -1 | 
392   	 0081	 83010088		do (i3), label_end_99			# LN: 135 | 
393   	 0082				label_begin_99:			/* LN: 135 | CYCLE: 0 | RULES: () */ 
394   	 0082	 B3140002		i3 = xmem[i2]			# LN: 137 | 
395   	 0083	 81940015		x1 = ymem[i5]; i5 += 1			# LN: 138, 138 | 
396   	 0084	 B74AB001		nm3 = (0xb001)			# LN: -1 | 
397   	 0085	 84140003		y0 = xmem[i3]			# LN: 138 | 
398   	 0086	 021B2489		i3 += n; a1 += x1 * y0			# LN: 139, 138 | 
399   	 0087	 B74A0000		nm3 = (0x0)			# LN: -1 | 
400   	 0088				label_end_99:			# LN: 135 | CYCLE: 6 | RULES: ()
401   	 0088	 B3540012		xmem[i2] = i3; i2 += 1			# LN: 139, 140 | 
402   	 0089				for_end_3:			/* LN: 135 | CYCLE: 0 | RULES: () */ 
403   	 0089	 95550004		i5 = i5 - (0x4)			# LN: 143 | 
404   	 008A	 92250004		i2 = i2 - (0x4)			# LN: 144 | 
405   	 008B				label_end_100:			# LN: 127 | CYCLE: 2 | RULES: ()
406   	 008B	 89D40011		ymem[i1] = a1; i1 += 1			# LN: 146, 146 | 
407   	 008C				for_end_2:			/* LN: 127 | CYCLE: 0 | RULES: () */ 
408   	 008C	 B8440002		xmem[_echoState + 2] = i4			# LN: 149 | 
409   	 008D	 02177FFF		i7 -= 1			# LN: 150 | 
410   	 008E	 B3140027		i3 = xmem[i7]; i7 -= 1			# LN: 150, 150 | 
411   	 008F	 B2140007		i2 = xmem[i7]			# LN: 150 | 
412   	 0090	 81880000		ret			# LN: 150 | 
413   						
414   						
415   						
416   	 0091				_multitap_echo_init:			/* LN: 71 | CYCLE: 0 | RULES: () */ 
417   	 0091	 B2540017		xmem[i7] = i2; i7 += 1			# LN: 71, 71 | 
418   	 0092	 B3540007		xmem[i7] = i3			# LN: 71 | 
419   	 0093	 A0050000		i0 = (0) + (_echo_buffer + 0)			# LN: 74 | 
420   	 0094	 A1050007		i1 = (0) + (_echoState + 7)			# LN: 76 | 
421   	 0095	 A4050000		i4 = (0) + (_initial_delay + 0)			# LN: 77 | 
422   	 0096	 A5050000		i5 = (0) + (_initial_gain + 0)			# LN: 79 | 
423   	 0097	 B24A1000		i2 = (0x1000)			# LN: 83 | 
424   	 0098	 A3050003		i3 = (0) + (_echoState + 3)			# LN: 80 | 
425   	 0099	 8201009B		do (i2), label_end_92			# LN: 83 | 
426   	 009A				label_begin_92:			/* LN: 83 | CYCLE: 0 | RULES: () */ 
427   	 009A	 00004DC0		a0 = 0			# LN: 85 | 
428   	 009B				label_end_92:			# LN: 83 | CYCLE: 1 | RULES: ()
429   	 009B	 98540010		xmem[i0] = a0h; i0 += 1			# LN: 85, 85 | 
430   	 009C				for_end_0:			/* LN: 83 | CYCLE: 0 | RULES: () */ 
431   	 009C	 A0050000		i0 = (0) + (_tap_gain_ymem + 0)			# LN: 88 | 
432   	 009D	 B044000C		xmem[_echoState + 12] = i0			# LN: 88 | 
433   	 009E	 A0050000		i0 = (0) + (_echo_buffer + 0)			# LN: 89 | 
434   	 009F	 B0440000		xmem[_echoState + 0] = i0			# LN: 89 | 
435   	 00A0	 884A1000		uhalfword(a0) = (0x1000)			# LN: 90 | 
436   	 00A1	 98440001		xmem[_echoState + 1] = a0h			# LN: 90 | 
437   	 00A2	 B0040000		i0 = xmem[_echoState + 0]			# LN: 91 | 
438   	 00A3	 887A4000		a0 = (0x4000)			# LN: 92 | 
439   	 00A4	 80051000		i0 = i0 + (0x1000)			# LN: 91 | 
440   	 00A5	 02107FFF		i0 -= 1			# LN: 91 | 
441   	 00A6	 B0440002		xmem[_echoState + 2] = i0			# LN: 91 | 
442   	 00A7	 9844000B		xmem[_echoState + 11] = a0h			# LN: 92 | 
443   	 00A8	 884A0004		uhalfword(a0) = (0x4)			# LN: 93 | 
444   	 00A9	 9844000D		xmem[_echoState + 13] = a0h			# LN: 93 | 
445   	 00AA	 B004000C		i0 = xmem[_echoState + 12]			# LN: 94 | 
446   	 00AB	 804000B3		do (0x4), label_end_93			# LN: 95 | 
447   	 00AC				label_begin_93:			/* LN: 95 | CYCLE: 0 | RULES: () */ 
448   	 00AC	 88140004		a0 = xmem[i4]			# LN: 97 | 
449   	 00AD	 894A0FFF		uhalfword(a1) = (_echo_buffer + 4095)			# LN: 97 | 
450   	 00AE	 194C44C0		a1 = xmem[i4]; i4 += 1; a0 = a1 - a0			# LN: 98, 98, 97 | 
451   	 00AF	 98090032		AnyReg(i2, a0h)			# LN: 97 | 
452   	 00B0	 B2540013		xmem[i3] = i2; i3 += 1			# LN: 97, 97 | 
453   	 00B1	 99540011		xmem[i1] = a1h; i1 += 1			# LN: 98, 98 | 
454   	 00B2	 88140015		a0 = xmem[i5]; i5 += 1			# LN: 99, 99 | 
455   	 00B3				label_end_93:			# LN: 95 | CYCLE: 7 | RULES: ()
456   	 00B3	 98D40010		ymem[i0] = a0h; i0 += 1			# LN: 99, 99 | 
457   	 00B4				for_end_1:			/* LN: 95 | CYCLE: 0 | RULES: () */ 
458   	 00B4	 B3140027		i3 = xmem[i7]; i7 -= 1			# LN: 101, 101 | 
459   	 00B5	 B2140007		i2 = xmem[i7]			# LN: 101 | 
460   	 00B6	 81880000		ret			# LN: 101 | 
461   						(null)
				 SYMBOL TABLE 

    Name                                                                                    Type                  Value 

_COMMON_INC_PATH_                                                               					 Define                 "C:/CirrusDSP/crystal32/common/inc/"
_DSP_                                                                           					 Define                 "a"
_LOCAL_INC_PATH_                                                                					 Define                 "inc/"
_LOCAL_SRC_PATH_                                                                					 Define                 "src/"
_MUI_VERSION_                                                                   					 Define                 "020000"
_OVLY_                                                                          					 Define                 "standalone"
_OVLY_REVISION_                                                                 					 Define                 "020000"
_ROUTER_INC_PATH_                                                               					 Define                 "rom_inc/"
_SLOT_                                                                          					 Define                 "0"
_TARGET_FAMILY_                                                                 					 Define                 "crystal32"
_TOOLS_VERSION_                                                                 					 Define                 "0x0701"
_VERSION_                                                                       					 Define                 "00"
__CASM_VER__                                                                    			  Unused Variable		        0 (701H)
__div                                                                           					 External   
__epilogue_228                                                                  			         Relocatable         main_GEN_0012:0067H
__start                                                                         					 External   
_cl_wavread_bits_per_sample                                                     					 External   
_cl_wavread_close                                                               					 External   
_cl_wavread_frame_rate                                                          					 External   
_cl_wavread_getnchannels                                                        					 External   
_cl_wavread_number_of_frames                                                    					 External   
_cl_wavread_open                                                                					 External   
_cl_wavread_recvsample                                                          					 External   
_cl_wavwrite_close                                                              					 External   
_cl_wavwrite_open                                                               					 External   
_cl_wavwrite_sendsample                                                         					 External   
_echoState._bufferLength                                                        			  Unused Relocatable        main_GEN_0001:0001H
_echoState._delay                                                               			  Unused Relocatable        main_GEN_0001:0007H
_echoState._input_gain                                                          			  Unused Relocatable        main_GEN_0001:000BH
_echoState._n_tap                                                               			  Unused Relocatable        main_GEN_0001:000DH
_echoState._pEchoBuff                                                           			  Unused Relocatable        main_GEN_0001:0000H
_echoState._readPointer                                                         			  Unused Relocatable        main_GEN_0001:0003H
_echoState._tap_gain                                                            			  Unused Relocatable        main_GEN_0001:000CH
_echoState._writePointer                                                        			  Unused Relocatable        main_GEN_0001:0002H
_echo_buffer                                                                    			  Public Relocatable       main_GEN_0002:0000H
_initial_delay                                                                  			  Public Relocatable       main_GEN_0003:0000H
_initial_gain                                                                   			  Public Relocatable       main_GEN_0004:0000H
_initial_input_gain                                                             			  Public Relocatable       main_GEN_0005:0000H
_main                                                                           			  Public Relocatable       main_GEN_0012:0000H
_multitap_echo                                                                  					 External   
_multitap_echo1                                                                 			  Public Relocatable       main_GEN_0012:0072H
_multitap_echo_init                                                             			  Public Relocatable       main_GEN_0012:0091H
_printf                                                                         					 External   
_sampleBuffer                                                                   			  Public Relocatable       main_GEN_0006:0000H
_strcpy                                                                         					 External   
_string_const_0                                                                 			         Relocatable         main_GEN_0007:0000H
_string_const_1                                                                 			         Relocatable         main_GEN_0008:0000H
_string_const_2                                                                 			         Relocatable         main_GEN_0009:0000H
_string_const_3                                                                 			         Relocatable         main_GEN_0010:0000H
_tap_gain_ymem                                                                  			  Public Relocatable       main_GEN_0011:0000H
dummy                                                                           			  Unused Number				     0 (0H)
else_0                                                                          			         Relocatable         main_GEN_0012:0016H
else_1                                                                          			         Relocatable         main_GEN_0012:0031H
endif_0                                                                         			  Unused Relocatable        main_GEN_0012:0016H
endif_1                                                                         			  Unused Relocatable        main_GEN_0012:0031H
for_end_0                                                                       			  Unused Relocatable        main_GEN_0012:009CH
for_end_1                                                                       			  Unused Relocatable        main_GEN_0012:00B4H
for_end_2                                                                       			  Unused Relocatable        main_GEN_0012:008CH
for_end_3                                                                       			  Unused Relocatable        main_GEN_0012:0089H
for_end_4                                                                       			  Unused Relocatable        main_GEN_0012:0062H
for_end_5                                                                       			  Unused Relocatable        main_GEN_0012:004BH
for_end_6                                                                       			  Unused Relocatable        main_GEN_0012:0049H
for_end_7                                                                       			  Unused Relocatable        main_GEN_0012:0061H
for_end_8                                                                       			  Unused Relocatable        main_GEN_0012:005FH
init_latch_label_5                                                              			  Unused Relocatable        main_GEN_0012:0049H
init_latch_label_7                                                              			  Unused Relocatable        main_GEN_0012:005FH
init_latch_label_8                                                              			  Unused Relocatable        main_GEN_0012:0061H
label_begin_100                                                                 			  Unused Relocatable        main_GEN_0012:0079H
label_begin_92                                                                  			  Unused Relocatable        main_GEN_0012:009AH
label_begin_93                                                                  			  Unused Relocatable        main_GEN_0012:00ACH
label_begin_94                                                                  			  Unused Relocatable        main_GEN_0012:003DH
label_begin_95                                                                  			  Unused Relocatable        main_GEN_0012:003AH
label_begin_96                                                                  			  Unused Relocatable        main_GEN_0012:0053H
label_begin_97                                                                  			  Unused Relocatable        main_GEN_0012:0050H
label_begin_98                                                                  			  Unused Relocatable        main_GEN_0012:0038H
label_begin_99                                                                  			  Unused Relocatable        main_GEN_0012:0082H
label_end_100                                                                   			         Relocatable         main_GEN_0012:008BH
label_end_92                                                                    			         Relocatable         main_GEN_0012:009BH
label_end_93                                                                    			         Relocatable         main_GEN_0012:00B3H
label_end_94                                                                    			         Relocatable         main_GEN_0012:0048H
label_end_95                                                                    			         Relocatable         main_GEN_0012:004AH
label_end_96                                                                    			         Relocatable         main_GEN_0012:005EH
label_end_97                                                                    			         Relocatable         main_GEN_0012:0060H
label_end_98                                                                    			         Relocatable         main_GEN_0012:0061H
label_end_99                                                                    			         Relocatable         main_GEN_0012:0088H

	       SEGMENTS:

Size			  Name										 Class
0000H	 __INIT                                  			 CODE                                    
0000H	 main_GEN_0000                           			 X_OVLY                                  
000EH	 main_GEN_0001                           			 X_OVLY                                  
1000H	 main_GEN_0002                           			 X_OVLY                                  
0004H	 main_GEN_0003                           			 X_OVLY                                  
0004H	 main_GEN_0004                           			 X_OVLY                                  
0001H	 main_GEN_0005                           			 X_OVLY                                  
0080H	 main_GEN_0006                           			 Y_OVLY                                  
001DH	 main_GEN_0007                           			 X_OVLY                                  
0027H	 main_GEN_0008                           			 X_OVLY                                  
001FH	 main_GEN_0009                           			 X_OVLY                                  
0028H	 main_GEN_0010                           			 X_OVLY                                  
0004H	 main_GEN_0011                           			 Y_OVLY                                  
00B7H	 main_GEN_0012                           			 CODE_OVLY                               
